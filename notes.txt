var x = -(5 + 2) - 10 / 20 * 10;

var  
  clause:
    type: declare
  global:
    index: 00
    stack: 00
x
  clause:
    type: identifier
    value: x
  global:
    index: 01
    stack: 01
=
  clause:
    type: assign
  global:


hmm, so I'm already running into this being weird or whatever....
no, not quire, I'm getting a little bit closer


well, let's think about it....

so I have something like...

var
  clause:
    type: declare

what this needs to know is that the next thing needs to be an identifier that hasn't been delcared yet


so it's kind of like 
var x = 1;
is really
var x;
x = 1;

which is how we would do assembly anyway, right?

ok, so that' find, so

we have this declare clause, right, and we declare it, but then what do we do....

like the declare clause needs to start a new kind of... stack or something....

how can we lump these two things together

like the operation is something like, I need to know the value to the right of me to do anything with me, so go find that part, ok?


1 op: declare x
if next token is not assign 
  throw error
if next token is not semicolon
2 op assign x 
  stack = 2
3 op negate

op parens

op subtract 5, 2

like really, if you think about it, it makes more sense to the right side first, right...
like if we can just print the ops in the right way...

it's almost like i want to throw everything to the right, unix style piping


so, the idea could be something like this....



var x = -(5 + 2) - 10 / 20 * 10;

01 declare x
02 stack [assign x]
03 stack [assign x]
04 stack [assign x, negate]
05 stack [assign x, negate, parens]
06 literal 5
07 plus
08 liter 2
09 stack [assign x, negate]
10 negate, stack [assign x]
11 minus
12 literal 10
13 divide
14 literal 20
15 multiply
16 literal 10
17 assign x

for a final code of...

declare x
5
+
2
negate
minus
10
divide
20
times
10


so, this is the thing right here, I don't think


I mean, this is the... what heck else is going on here, how long can this thing....

So it needs to keep track of the operator precedence, this is one more problem with this stacking dealio....


ok, so the problem that this is running into is that i need something more than two.. no, it's just this precedence thing means I need to do certain things
before or after other things, it needs to rewrite it to do things in the correct order, or something like this.

Well... if we're not doing things from left to right, than this is doing something else
so, what it needs to have is some sort of intermediate values to do this, right, it needs to do this... I mean, I could do something more than this...

like the problem with something like this is it can't all just go to the right... right? I mean, that would be a little bit wacky to translate into, no?

i mean, if I can store things into intermediate values, than we're good.

like some sort of grouping operator, 

like here is the problem with this, what the heck does this minus thing even mean...
and why does the negate haappen after, where the thing on the... yeah, what if we have a left and a right things




so the form should look something like this....


i mean, jeez, let's just reverse this guy real good

var x = -(5 + 2) - 10 / 20 * 10;

left
  left
    x
  declare
right
  left
    left
      5
    right
      2
    plus
  right
    left
      left
        10
      right
        20
    right
      10
    times
  minus
assign

so I mean, this isn't a horrible idea, but it is a lot worse that
but this isn't the... this is probably worse that a tree, like it's just like having a tree, but keep my own track of tree nodes or whatever, right

so, the other thing I could do is....


I mean, if I stored them as stacks, what the heck would I do with these stacks, I mean, the thing about stacks is the idea that they are randomly growing.
























    















x    index 01 stack [01]
=    index 02 stack [02]
(    index 03 stack [02,03]
 5    index 04 stack [02,03,04]
+    index 05 stack [02,03,05]
2    index 06 stack [02,03,06]
)    index 07 stack [02,07]
-    index 08 stack [02,08]
10   index 09 stack [02,09]
/    index 10 stack [02,09,10]
20   index 11 stack [02,09,11]
;    kindex 12 stack [12]








so, an interesting question is something like this, how do I know if it is a minus or a negation operator?

well, let's give it some clues, the trick is basically that the if the previous thing is in fact an operator... or something like that, it is negation.

So, if it is literal, or parents before that... then it is an operator...

So let's just look at the previous thing... 

I mean, if it's a paren, it's a minus
if it's an ident, it's a minus
if it's an equal, it's a minus
  if it's





// 4 5 plus 6 2 mult 3 div minus 6 neg 7 div 8 neg mult 3 neg div 4 div 5 - 6 +kkf

push declare
write x
pwrite declare
push assign
write 5
push plus
write 4
pwrite plus
push minus
write 6
push mult
write 2
pwrite mult
push div
write 3
pwrite div
pwrite minus
push plus
push neg
write 6
pwrite neg
push div
write 7
pwrite div
push mult
push neg
write 8
pwrite neg
push div
push neg
write 3
pwrite neg
push div
write 4
pwrite div
push sub
write 5
pwrite sub
push plus
write 6
pwrite plus
pwrite assign

// note that, for parens, all we need to know is that there is in fact a different instruction for a call start
// like the start group is different than say a start function group
// I also wouldn't mind if functinos have something a little more similar to their....
// I wouldn't be that mad.. I mean that would be ok, I think the core differences is..
// 
// jeez, honestly if I can get rid of this, looping thign, I can get rid of like ALL of the tokens that I have generated, right?
// 
// well, that would be fun, and honestly it would be cool not to have this big ol data structure, right...?






// Instruction
literal: 4
literal: 5
literal: 6
literal: 2
i type: DIV
literal: 3
i type: ADD
i type: NEG
literal: 6
i type: DIV
literal: 7
i type: NEG
literal: 8
i type: DIV
i type: NEG
literal: 3
i type: DIV
literal: 4
i type: SUB
literal: 5
i type: ADD
literal: 6



4 + 5 - 6 * 2 / 3 + - 6 / 7 * -8 / -3 / 4 - 5 + 6

4 5 plus 6 2 mult 3 div minus 6 neg 7 div 8 neg times 3 neg div 4 div plus 5 minus 6 plus
4 5 6 2 MULT 4 3 MULT 4 DIV DIV ADD 6 7 MULT 4 MULT 8 MULT 4 3 4 MULT 4 5 MULT 4 6


// IS THIS THAT MUCH BETTER THAN I TREE? WELL, MAINLY BECAUSE I HATE TREES, AND HOW THE HECK AM I GOING TO STORE THEM?
// BY JUST DOING A HEAP ALLOCATION EVERY TIME? THAT DOESN'T SOUND LIKE A LOT OF FUN
// so it has that benefit
// as far as readability, it's not that much more readable, if i'm being honest, maybe if I put this in the opposite order?

4 + 5 - 6 * 2 / 3 + - 6 / 7 * -8 / -3 / 4 - 5 + 6
// 4 5 plus 6 2 mult 3 div minus 6 neg 7 div 8 neg times 3 neg div 4 div plus 5 minus 6 plus
// like honestly, just reverse these ops and I'll get it
// yeah, this is honestly not that much better than a tree, the tree would look something like
//
// so, yeah, the parse tree would be nasty
// like, I don't even want to fix this
//
// 
// 4 5 plus 6 2 mult 3 div minus 6 neg 7 div 8 neg times 3 neg div 4 div plus 5 minus 6 plus
// 
// 
// plus 6  
//      minus   5
//              plus   div  4
//                          neg    3
//                     times   neg 8
///                            div 7
//                                 neg  6
//              minus div 3
//                    mult 2
//  
//       plus 4
//            5
// 
// neither of these are really that much easier to read or that much easier to understand
// my gut feeling is that typing these things is going to be a bitch either way, so I just need to do whatever I need to do to make them workout
// I mean, I wouldn't be surprised if there are some advantages to this type of thing for typing, i.e. type left is equal to type right, or whatever
// but honestly, the recursive descent thing isn't exactly easy, or exactly easier than whatever the heck I am doing right here
// so, what this means is I do think that I'm getting closer here, I just also think that it is about time to start doing some tests... 
// which is kind of fun, but also... no, it's kind of to the point where I need this to happen. I really don't need the tokens or whatever to happen because that is
// just far to easy.
// I'm not exaclty sure how to type cast this baby
// 
// hmm, so what can I do for tonight, like I could write the framework for testing things right away, that could be alright...
// but I don't want to... just work on these tests, I would rather think these through...
// 
// so, hmm, this algorithm is close, but I'm not so sure about the pop until type behavior, but hey, maybe that is the only way to go about things, let's lok at this thang
//
// 
//
// 
//


// hmm, hmm, so the thing is that these numbers aren't causing the popping, is that the problem





Instruction
i type: LITERAL
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 5
line: 1
start: 4
end: 4
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 6
line: 1
start: 8
end: 8
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 2
line: 1
start: 12
end: 12
Instruction
i type: MULT
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 3
line: 1
start: 16
end: 16
Instruction
i type: MULT
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: DIV
token:
type: SLASH
literal: 
line: 1
start: 14
end: 14
Instruction
i type: DIV
token:
type: SLASH
literal: 
line: 1
start: 14
end: 14
Instruction
i type: ADD
token:
type: PLUS
literal: 
line: 1
start: 18
end: 18
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 6
line: 1
start: 22
end: 22
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 7
line: 1
start: 26
end: 26
Instruction
i type: MULT
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: MULT
token:
type: STAR
literal: 
line: 1
start: 28
end: 28
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 8
line: 1
start: 31
end: 31
Instruction
i type: MULT
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 3
line: 1
start: 36
end: 36
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 4
line: 1
start: 40
end: 40
Instruction
i type: MULT
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 5
line: 1
start: 44
end: 44
Instruction
i type: MULT
token:
type: NUMBER
literal: 4
line: 1
start: 0
end: 0
Instruction
i type: LITERAL
token:
type: NUMBER
literal: 6
line: 1
start: 48
end: 48



























nstruction
i type: LITERAL
literal 4
Instruction
i type: LITERAL
literal 5
Instruction
i type: LITERAL
literal 6
Instruction
i type: LITERAL
literal 2
Instruction
i type: MULT
literal 4
Instruction
i type: LITERAL
literal 3
Instruction
i type: MULT
literal 4
Instruction
i type: DIV
Instruction
i type: DIV
Instruction
i type: ADD
Instruction
i type: LITERAL
literal 6
Instruction
i type: LITERAL
literal 7
Instruction
i type: MULT
literal 4
Instruction
i type: MULT
Instruction
i type: LITERAL
literal 8
Instruction
i type: MULT
literal 4
Instruction
i type: LITERAL
literal 3
Instruction
i type: LITERAL
literal 4
Instruction
i type: MULT
literal 4
Instruction
i type: LITERAL
literal 5
Instruction
i type: MULT
literal 4
Instruction
i type: LITERAL
literal 6



